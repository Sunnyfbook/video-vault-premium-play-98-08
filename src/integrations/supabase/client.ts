
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kumgcubkiraksmwlzjnv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1bWdjdWJraXJha3Ntd2x6am52Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5MDgwODYsImV4cCI6MjA2MzQ4NDA4Nn0.DQDowwGFaVp_MkYeUEY7ILBjG1kcvW7Neb_-4yeAD_8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // We're handling our own session management for now
  }
});

// Set up a custom auth session based on our user authentication
const setupCustomAuth = () => {
  const userId = localStorage.getItem('userId');
  if (userId) {
    // Create a minimal session context for RLS policies
    supabase.auth.getSession = async () => ({
      data: {
        session: {
          user: { id: userId } as any,
          access_token: 'custom-token',
          refresh_token: '',
          expires_in: 3600,
          expires_at: Date.now() + 3600000,
          token_type: 'bearer'
        }
      },
      error: null
    });
  }
};

// Initialize custom auth when the module loads
setupCustomAuth();

// Re-setup auth when localStorage changes
window.addEventListener('storage', setupCustomAuth);
